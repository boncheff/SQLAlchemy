"""

Revision ID: 10c1ac184f2c
Revises: 24687dde15e5
Create Date: 2015-09-21 15:29:40.827143

"""

# revision identifiers, used by Alembic.
revision = '10c1ac184f2c'
down_revision = '1807a6c21763'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
from sqlalchemy.dialects import postgresql
from database.tag_types import GEO_TAGS
from database.models import Location
from sqlalchemy.orm import sessionmaker


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.add_column('locations', sa.Column('city_latitude', sa.Float(), nullable=True))
    op.add_column('locations', sa.Column('city_longitude', sa.Float(), nullable=True))
    op.add_column('locations', sa.Column('city_name', sa.String(), nullable=True))
    op.add_column('locations', sa.Column('country_latitude', sa.Float(), nullable=True))
    op.add_column('locations', sa.Column('country_longitude', sa.Float(), nullable=True))
    op.add_column('locations', sa.Column('country_name', sa.String(), nullable=True))
    op.add_column('locations', sa.Column('datacenter_latitude', sa.Float(), nullable=True))
    op.add_column('locations', sa.Column('datacenter_longitude', sa.Float(), nullable=True))
    op.add_column('locations', sa.Column('datacenter_name', sa.String(), nullable=True))
    op.add_column('locations', sa.Column('region_latitude', sa.Float(), nullable=True))
    op.add_column('locations', sa.Column('region_longitude', sa.Float(), nullable=True))
    op.add_column('locations', sa.Column('region_name', sa.String(), nullable=True))
    op.add_column('locations', sa.Column('state_latitude', sa.Float(), nullable=True))
    op.add_column('locations', sa.Column('state_longitude', sa.Float(), nullable=True))
    op.add_column('locations', sa.Column('state_name', sa.String(), nullable=True))
    op.create_unique_constraint('unique_locations', 'locations', ['datacenter_name',
                                                                  'state_name',
                                                                  'city_name',
                                                                  'country_name',
                                                                  'region_name',
                                                                  'provider',
                                                                  'provider_tag'])
    op.create_unique_constraint('unique_providers', 'locations', ['provider_tag',
                                                                  'provider'])

    # Tuples below contain new field and old field 
    # i.e. name becomes datacenter_name, city -> city_name and so on...
    columns = [('datacenter_name', 'name'), ('datacenter_latitude', 'latitude'), 
               ('datacenter_longitude', 'longitude'), ('city_name', 'city'),
               ('country_name', 'country'), ('region_name', 'region')]
    for new, old in columns:
        op.execute("UPDATE locations SET %s = %s" % (new, old))

    op.drop_column('locations', 'city')
    op.drop_column('locations', 'name')
    op.drop_column('locations', 'country')
    op.drop_column('locations', 'region')
    op.drop_column('locations', 'longitude')
    op.drop_column('locations', 'latitude')

    Session = sessionmaker()
    bind = op.get_bind()
    session = Session(bind=bind)

    items = []
    locations = session.query(Location).all()

    for key in GEO_TAGS:
        for region, values in GEO_TAGS[key].iteritems():
            found = False
            for location in locations:
                if region in location.provider_tag and key in location.provider:
                    found = True
            if not found:
                values['provider'] = key
                values['provider_tag'] = region
                items.append(values)
    op.bulk_insert(Location.__table__, items)
    session.close()
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.add_column('locations', sa.Column('latitude', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('locations', sa.Column('longitude', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('locations', sa.Column('region', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('locations', sa.Column('country', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('locations', sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('locations', sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint('unique_providers', 'locations', type_='unique')
    op.drop_constraint('unique_locations', 'locations', type_='unique')

    # Tuples below contain new field and old field 
    # i.e. datacenter_name becomes name, city_name -> name and so on...
    columns = [('name', 'datacenter_name'), ('city', 'city_name'),
               ('country', 'country_name'),
               ('region', 'region_name'), ('latitude', 'datacenter_latitude'),
               ('longitude', 'datacenter_longitude')]

    for new, old in columns:
        op.execute("UPDATE locations SET %s = %s" % (new, old))
        # Set all columns to NOT NULL apart from latitude and longitude
        if 'tude' not in new:
            op.execute("ALTER TABLE locations ALTER COLUMN %s SET NOT NULL" % (new))

    op.drop_column('locations', 'state_name')
    op.drop_column('locations', 'state_longitude')
    op.drop_column('locations', 'state_latitude')
    op.drop_column('locations', 'region_name')
    op.drop_column('locations', 'region_longitude')
    op.drop_column('locations', 'region_latitude')
    op.drop_column('locations', 'datacenter_name')
    op.drop_column('locations', 'datacenter_longitude')
    op.drop_column('locations', 'datacenter_latitude')
    op.drop_column('locations', 'country_name')
    op.drop_column('locations', 'country_longitude')
    op.drop_column('locations', 'country_latitude')
    op.drop_column('locations', 'city_name')
    op.drop_column('locations', 'city_longitude')
    op.drop_column('locations', 'city_latitude')
    ### end Alembic commands ###
